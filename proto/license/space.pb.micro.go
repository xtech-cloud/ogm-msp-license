// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/license/space.proto

package license

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/asim/go-micro/v3/api"
	client "github.com/asim/go-micro/v3/client"
	server "github.com/asim/go-micro/v3/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Space service

func NewSpaceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Space service

type SpaceService interface {
	// 创建
	Create(ctx context.Context, in *SpaceCreateRequest, opts ...client.CallOption) (*UuidResponse, error)
	// 更新
	Update(ctx context.Context, in *SpaceUpdateRequest, opts ...client.CallOption) (*UuidResponse, error)
	// 获取
	Get(ctx context.Context, in *SpaceGetRequest, opts ...client.CallOption) (*SpaceGetResponse, error)
	// 列举
	List(ctx context.Context, in *SpaceListRequest, opts ...client.CallOption) (*SpaceListResponse, error)
	//  搜索
	Search(ctx context.Context, in *SpaceSearchRequest, opts ...client.CallOption) (*SpaceListResponse, error)
}

type spaceService struct {
	c    client.Client
	name string
}

func NewSpaceService(name string, c client.Client) SpaceService {
	return &spaceService{
		c:    c,
		name: name,
	}
}

func (c *spaceService) Create(ctx context.Context, in *SpaceCreateRequest, opts ...client.CallOption) (*UuidResponse, error) {
	req := c.c.NewRequest(c.name, "Space.Create", in)
	out := new(UuidResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spaceService) Update(ctx context.Context, in *SpaceUpdateRequest, opts ...client.CallOption) (*UuidResponse, error) {
	req := c.c.NewRequest(c.name, "Space.Update", in)
	out := new(UuidResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spaceService) Get(ctx context.Context, in *SpaceGetRequest, opts ...client.CallOption) (*SpaceGetResponse, error) {
	req := c.c.NewRequest(c.name, "Space.Get", in)
	out := new(SpaceGetResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spaceService) List(ctx context.Context, in *SpaceListRequest, opts ...client.CallOption) (*SpaceListResponse, error) {
	req := c.c.NewRequest(c.name, "Space.List", in)
	out := new(SpaceListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spaceService) Search(ctx context.Context, in *SpaceSearchRequest, opts ...client.CallOption) (*SpaceListResponse, error) {
	req := c.c.NewRequest(c.name, "Space.Search", in)
	out := new(SpaceListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Space service

type SpaceHandler interface {
	// 创建
	Create(context.Context, *SpaceCreateRequest, *UuidResponse) error
	// 更新
	Update(context.Context, *SpaceUpdateRequest, *UuidResponse) error
	// 获取
	Get(context.Context, *SpaceGetRequest, *SpaceGetResponse) error
	// 列举
	List(context.Context, *SpaceListRequest, *SpaceListResponse) error
	//  搜索
	Search(context.Context, *SpaceSearchRequest, *SpaceListResponse) error
}

func RegisterSpaceHandler(s server.Server, hdlr SpaceHandler, opts ...server.HandlerOption) error {
	type space interface {
		Create(ctx context.Context, in *SpaceCreateRequest, out *UuidResponse) error
		Update(ctx context.Context, in *SpaceUpdateRequest, out *UuidResponse) error
		Get(ctx context.Context, in *SpaceGetRequest, out *SpaceGetResponse) error
		List(ctx context.Context, in *SpaceListRequest, out *SpaceListResponse) error
		Search(ctx context.Context, in *SpaceSearchRequest, out *SpaceListResponse) error
	}
	type Space struct {
		space
	}
	h := &spaceHandler{hdlr}
	return s.Handle(s.NewHandler(&Space{h}, opts...))
}

type spaceHandler struct {
	SpaceHandler
}

func (h *spaceHandler) Create(ctx context.Context, in *SpaceCreateRequest, out *UuidResponse) error {
	return h.SpaceHandler.Create(ctx, in, out)
}

func (h *spaceHandler) Update(ctx context.Context, in *SpaceUpdateRequest, out *UuidResponse) error {
	return h.SpaceHandler.Update(ctx, in, out)
}

func (h *spaceHandler) Get(ctx context.Context, in *SpaceGetRequest, out *SpaceGetResponse) error {
	return h.SpaceHandler.Get(ctx, in, out)
}

func (h *spaceHandler) List(ctx context.Context, in *SpaceListRequest, out *SpaceListResponse) error {
	return h.SpaceHandler.List(ctx, in, out)
}

func (h *spaceHandler) Search(ctx context.Context, in *SpaceSearchRequest, out *SpaceListResponse) error {
	return h.SpaceHandler.Search(ctx, in, out)
}
