// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/license/certificate.proto

package license

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Certificate service

type CertificateService interface {
	// 获取
	Fetch(ctx context.Context, in *CerFetchRequest, opts ...client.CallOption) (*CerFetchResponse, error)
	// 列举
	List(ctx context.Context, in *CerListRequest, opts ...client.CallOption) (*CerListResponse, error)
}

type certificateService struct {
	c    client.Client
	name string
}

func NewCertificateService(name string, c client.Client) CertificateService {
	return &certificateService{
		c:    c,
		name: name,
	}
}

func (c *certificateService) Fetch(ctx context.Context, in *CerFetchRequest, opts ...client.CallOption) (*CerFetchResponse, error) {
	req := c.c.NewRequest(c.name, "Certificate.Fetch", in)
	out := new(CerFetchResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *certificateService) List(ctx context.Context, in *CerListRequest, opts ...client.CallOption) (*CerListResponse, error) {
	req := c.c.NewRequest(c.name, "Certificate.List", in)
	out := new(CerListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Certificate service

type CertificateHandler interface {
	// 获取
	Fetch(context.Context, *CerFetchRequest, *CerFetchResponse) error
	// 列举
	List(context.Context, *CerListRequest, *CerListResponse) error
}

func RegisterCertificateHandler(s server.Server, hdlr CertificateHandler, opts ...server.HandlerOption) error {
	type certificate interface {
		Fetch(ctx context.Context, in *CerFetchRequest, out *CerFetchResponse) error
		List(ctx context.Context, in *CerListRequest, out *CerListResponse) error
	}
	type Certificate struct {
		certificate
	}
	h := &certificateHandler{hdlr}
	return s.Handle(s.NewHandler(&Certificate{h}, opts...))
}

type certificateHandler struct {
	CertificateHandler
}

func (h *certificateHandler) Fetch(ctx context.Context, in *CerFetchRequest, out *CerFetchResponse) error {
	return h.CertificateHandler.Fetch(ctx, in, out)
}

func (h *certificateHandler) List(ctx context.Context, in *CerListRequest, out *CerListResponse) error {
	return h.CertificateHandler.List(ctx, in, out)
}
