// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/license/key.proto

package license

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/asim/go-micro/v3/api"
	client "github.com/asim/go-micro/v3/client"
	server "github.com/asim/go-micro/v3/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Key service

func NewKeyEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Key service

type KeyService interface {
	// 生成
	Generate(ctx context.Context, in *KeyGenerateRequest, opts ...client.CallOption) (*KeyGenerateResponse, error)
	// 查询
	Query(ctx context.Context, in *KeyQueryRequest, opts ...client.CallOption) (*KeyQueryResponse, error)
	// 激活
	Activate(ctx context.Context, in *KeyActivateRequest, opts ...client.CallOption) (*KeyActivateResponse, error)
	// 挂起
	Suspend(ctx context.Context, in *KeySuspendRequest, opts ...client.CallOption) (*BlankResponse, error)
	// 列举
	List(ctx context.Context, in *KeyListRequest, opts ...client.CallOption) (*KeyListResponse, error)
}

type keyService struct {
	c    client.Client
	name string
}

func NewKeyService(name string, c client.Client) KeyService {
	return &keyService{
		c:    c,
		name: name,
	}
}

func (c *keyService) Generate(ctx context.Context, in *KeyGenerateRequest, opts ...client.CallOption) (*KeyGenerateResponse, error) {
	req := c.c.NewRequest(c.name, "Key.Generate", in)
	out := new(KeyGenerateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyService) Query(ctx context.Context, in *KeyQueryRequest, opts ...client.CallOption) (*KeyQueryResponse, error) {
	req := c.c.NewRequest(c.name, "Key.Query", in)
	out := new(KeyQueryResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyService) Activate(ctx context.Context, in *KeyActivateRequest, opts ...client.CallOption) (*KeyActivateResponse, error) {
	req := c.c.NewRequest(c.name, "Key.Activate", in)
	out := new(KeyActivateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyService) Suspend(ctx context.Context, in *KeySuspendRequest, opts ...client.CallOption) (*BlankResponse, error) {
	req := c.c.NewRequest(c.name, "Key.Suspend", in)
	out := new(BlankResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyService) List(ctx context.Context, in *KeyListRequest, opts ...client.CallOption) (*KeyListResponse, error) {
	req := c.c.NewRequest(c.name, "Key.List", in)
	out := new(KeyListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Key service

type KeyHandler interface {
	// 生成
	Generate(context.Context, *KeyGenerateRequest, *KeyGenerateResponse) error
	// 查询
	Query(context.Context, *KeyQueryRequest, *KeyQueryResponse) error
	// 激活
	Activate(context.Context, *KeyActivateRequest, *KeyActivateResponse) error
	// 挂起
	Suspend(context.Context, *KeySuspendRequest, *BlankResponse) error
	// 列举
	List(context.Context, *KeyListRequest, *KeyListResponse) error
}

func RegisterKeyHandler(s server.Server, hdlr KeyHandler, opts ...server.HandlerOption) error {
	type key interface {
		Generate(ctx context.Context, in *KeyGenerateRequest, out *KeyGenerateResponse) error
		Query(ctx context.Context, in *KeyQueryRequest, out *KeyQueryResponse) error
		Activate(ctx context.Context, in *KeyActivateRequest, out *KeyActivateResponse) error
		Suspend(ctx context.Context, in *KeySuspendRequest, out *BlankResponse) error
		List(ctx context.Context, in *KeyListRequest, out *KeyListResponse) error
	}
	type Key struct {
		key
	}
	h := &keyHandler{hdlr}
	return s.Handle(s.NewHandler(&Key{h}, opts...))
}

type keyHandler struct {
	KeyHandler
}

func (h *keyHandler) Generate(ctx context.Context, in *KeyGenerateRequest, out *KeyGenerateResponse) error {
	return h.KeyHandler.Generate(ctx, in, out)
}

func (h *keyHandler) Query(ctx context.Context, in *KeyQueryRequest, out *KeyQueryResponse) error {
	return h.KeyHandler.Query(ctx, in, out)
}

func (h *keyHandler) Activate(ctx context.Context, in *KeyActivateRequest, out *KeyActivateResponse) error {
	return h.KeyHandler.Activate(ctx, in, out)
}

func (h *keyHandler) Suspend(ctx context.Context, in *KeySuspendRequest, out *BlankResponse) error {
	return h.KeyHandler.Suspend(ctx, in, out)
}

func (h *keyHandler) List(ctx context.Context, in *KeyListRequest, out *KeyListResponse) error {
	return h.KeyHandler.List(ctx, in, out)
}
